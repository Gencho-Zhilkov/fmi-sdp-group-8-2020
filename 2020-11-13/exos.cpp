/*
(0.75 т) Задача 1. Да се реализира метод void insertAtStart(x) за двойносвързания списък DList, който добавя елемент
със стойност x в началото на двойносвързан списък.
* Ако искате да използвате методи като insertAfter(p,x) и insertToEnd(x), трябва първо да ги дефинирате.


(1.25 т) Задача 2. Имаме свързан списък L от циклични списъци от уникални в рамките на съответния цикличен списък
символи, както и текстов файл, в който е записано изречение. Да се имплементира външна функция, която приема един
такъв списък и проверява дали изречението от файла може да се прочете в рамките на L, като първата дума от
изречението трябва да може да се прочете в рамките на първия цикличен списък, втората дума от изречението във
втория цикличен списък и т.н. Думите са с максимална дължина до 20 символа.
Забележки:
    1. Приемаме, че една дума може да се прочете в рамките на един цикличен списък, ако буквите на думата се
    намират в последователни елементи на цикличния списък. Например, ако в списъка имаме последователно
    символите ‘c’, ‘h’, ‘a’ и ‘r’, то една дума, която може да се прочете в него е “arch”.
    2. В рамките на текстовия файл изречението може да има следните препинателни знаци - ‘.’ (точка) ‘,’ (запетая),
    ‘:’ (две точки), ‘;’(точка и запетая), ‘?’ и ‘!’. Знаците НЕ участват при проверката в рамките на цикличните
    списъци.


Задача 3. Имате двоичен файл с пряк достъп players.dat (в който се пази информация за най-много 10 играчи на
домино като за всеки играч се пази име до 100 символа и начална сума пари, която играчът притежава) и двоичен файл
с пряк достъп domino_tiles.dat, в който се пази информация за уникални плочки за домино като за всяка плочка се пази
стойността на лявата й страна и стойността на дясната й страна.
Реализирайте програма, която:

(1 т) а) Прочита, извлича информацията от двата файла и разпределя последователно плочките от dominos.dat на
играчите като първата плочка дава на играч номер едно от първия файл, втората плочка дава на втория играч и т.н. Ако
в players.dat са изброени 4 играча, то петата плочка ще се даде на първия играч, шестата на втория и така нататък до
края на плочките от domino_tiles.dat.
*За целта можете да реализирате допълнителни структури от данни.

(1 т) б) След получаването на плочките, играчите започват игра. Във всеки ход на играта, всеки играч поставя на
масата първата получена плочка и играчът с най-висока сума, на двете страни на плочката, печели всичките плочки в
рамките на хода (при равенство на сумата на две плочки, печели човекът с най-висока страна от плочката). При
прибиране на спечелените плочки играчът може да ги използва отново, но не преди да е изиграл всички останали
плочки. Освен че печели плочките, този играч взима и по 100 пари от всеки от другите играчи. Ако даден играч изгуби
всичките си пари или плочките му свършат, то той излиза от играта. Напишете програма, която реализира 15 хода от
тази игра и като резултат извежда на стандартния изход името на играча с най-много пари и сумата пари, която има
след изиграването на играта.
* Ако даден играч има сума между 0 и 100 пари, той може да изиграе още един ход.
*/
